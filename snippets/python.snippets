# #
snippet #u "coding: utf-8" b
	# coding: utf-8
snippet #! "shebang" b
	#!/usr/bin/env python3
# [
snippet [f "list comprehension" i
	[${1:x} for $1 from $2]
snippet {f "dict comprehension" i
	{${1:x}: ${2:y} for $1, $2 from $2}
# .
snippet .a "append" i
	.append($1)$0
snippet .e "extend" i
	.extend($1)$0
snippet .u "update" i
	.update($1)$0
snippet .s "strip" i
	.strip()
snippet .sp "strip" i
	.split($1)$0
snippet .ss "strip" i
	.strip().split($1)$0
# a
snippet a "assert" b
	assert
# b
snippet b "break" b
	break
# c
snippet c "continue" b
	continue
snippet cl "class" b
	class $1:
		${0:pass}
snippet cli "class with init" b
	class $1:
		def __init__(self$2) -> None:
			${0:pass}
# d
snippet d "def" b
	def $1(${2:`indent('.') ? 'self' : ''`}) -> ${3:None}:
		$0
# e
# f
snippet f "for in" b
	for ${1:item} in ${2:items}:
	    $0
snippet fi "from import" b
	from ${1:package} import ${0:module}
# g
snippet g "global" b
	global
# h
# i
snippet i "import" b
	import $0
snippet ifm "if main" b
	if __name__ == '__main__':
	    ${0:main()}
# j
# k
# l
snippet l "lambda"
	lambda $1: $0
snippet ld "logging.debug"
	${1|logging,logger|}.debug($0)
snippet li "logging.info"
	${1|logging,logger|}.info($0)
snippet lw "logging.warning"
	${1|logging,logger|}.warning($0)
snippet le "logging.error"
	${1|logging,logger|}.error($0)
# m
# n
# o
# p
snippet p "pass" b
	pass
# q
# r
snippet r "return" b
	return $0
snippet ra "raise exception" b
	raise ${0:Exception}
snippet rai "raise exception" b
	raise ${0:Exception}
# s
snippet s. "self." i
	self.
# t
snippet t "try except" b
	try:
	    $1
	except ${2:Exception}$3:
		$0
snippet tf "try finally" b
 	try:
		$1
	finally:
		$0
snippet tef "try except finally" b
 	try:
		$1
	except ${2:Exception}$3:
		$4
	finally:
		$0
# u
# v
# w
snippet w "while" b
	while $1:
		$0
snippet wi "with statement" b
	with ${1:expr} as ${2:var}:
	    $0
snippet wr "with open read" b
	with open('$1', '${2:r}', encoding='${3:utf-8}') as ${4:f}:
	    $0
snippet ww "with open write" b
	with open('$1', '${2:w}', encoding='${3:utf-8}', newline='${4:\\n}') as ${5:fw}:
	    $0
# x
# y
snippet y "yield" b
	yield $0
# z
