# #
snippet #u "coding: utf-8"
	# -*- coding: utf-8 -*-
snippet #a "coding with information"
    # -*- coding: utf-8 -*-
    # @Auther: Verf
    # @Email: verf@protonmail.com
snippet #! "shebang"
	#!/usr/bin/env python3
# a
snippet a "assert"
	assert
# b
snippet b "break"
	break
# c
snippet c "continue"
	continue
snippet cl "class"
	class $1:
		def __init__(self$2) -> None:
			${0:pass}
# d
snippet d "def"
	def $1($2) -> ${3:None}:
		${0:pass}
# e
# f
snippet fo "for in"
	for ${1:item} in ${2:items}:
	    $0
snippet fim "from import"
	from ${1:package} import ${0:module}
snippet fls "for line split"
	for ${1:line} in ${2:f}:
		${3:tokens} = ${1}.strip().split(${4})
# g
snippet g "global"
	global
# h
# i
snippet if "if"
	if $1:
		$0
snippet im "import"
	import ${0:package}
snippet ifm "if main"
	if __name__ == '__main__':
	    ${0:main()}
# j
# k
# l
snippet l "lambda"
	lambda $1: $0
snippet li "logging.info"
	logging.info($0)
snippet lw "logging.warning"
	logging.warning($0)
snippet le "logging.error"
	logging.error($0)
# m
# n
snippet n "None" i
	None
# o
# p
snippet p "pass"
	pass
snippet pr "print"
	print($0)
# q
# r
snippet r "return"
	return
snippet ra "raise exception"
	raise ${1:Exception}($0)
# s
snippet s. "self." i
	self.
# t
snippet te "try except"
	try:
	    $1
	except ${2:Exception} as ${3:e}:
		${0:raise $3}
snippet tef "try except finally"
 	try:
		$1
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	finally:
		$0
# u
# v
# w
snippet w "while"
	while $1:
		$0
snippet wa "with statement"
	with ${1:expr} as ${2:var}:
	    $0
snippet wr "with open read"
	with open('$1', '${2:r}', encoding='${3:utf-8}') as ${4:f}:
	    $0
snippet ww "with open write"
	with open('$1', '${2:w}', encoding='${3:utf-8}', newline='${4:\\n}') as ${5:fw}:
	    $0
# x
# y
snippet y "yield"
	yield
# z
